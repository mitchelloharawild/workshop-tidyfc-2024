---
title: "Time Series Analysis & Forecasting Using R"
subtitle: "6. Introduction to forecasting"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: header.tex
    keep-tex: false
---

## Outline

\vspace*{0.7cm}\tableofcontents


```{r}
#| label: setup
#| include: false
#| cache: false
source("setup.R")
h02 <- tsibbledata::PBS |>
  filter(ATC2 == "H02") |>
  summarise(Cost = sum(Cost))
melsyd <- tsibbledata::ansett |>
  filter(Airports == "MEL-SYD")
```

# Statistical forecasting

## Forecasting is difficult

\full{hopecasts2}

## What can we forecast?

\full{nasdaq-stock-market}

## What can we forecast?

\full{Forex2}

## What can we forecast?

\full{pills}

## What can we forecast?

\full{elecwires2}

## What can we forecast?

\full{AusBOM}

## What can we forecast?

\full{ts22015}

## What can we forecast?

\full{comet}

## Which is easiest to forecast?

 1. daily electricity demand in 3 days time
 2. timing of next Halley's comet appearance
 3. time of sunrise this day next year
 4. Google stock price tomorrow
 5. Google stock price in 6 months time
 6. maximum temperature tomorrow
 7. exchange rate of \$US/AUS next week
 8. total sales of drugs in Australian pharmacies next month

\pause

 - how do we measure "easiest"?
 - what makes something easy/difficult to forecast?

## Factors affecting forecastability

Something is easier to forecast if:

 - we have a good understanding of the factors that contribute to it
 - there is lots of data available;
 - the forecasts cannot affect the thing we are trying to forecast.
 - there is relatively low natural/unexplainable random variation.
 - the future is somewhat similar to the past

## Random futures

```{r austa, echo=FALSE}
# Grab ABS data
austa <- readxl::read_excel("data/340101.xlsx", sheet = "Data1", skip = 9) |>
  rename(date = `Series ID`, value = A85375847A) |>
  select(date, value) |>
  transmute(
    Month = yearmonth(date),
    Visitors = value / 1e3
  ) |>
  bind_rows(tibble(
    Month = yearmonth(seq(as.Date("2021-11-01"), by = "1 month", length = 2)),
    Visitors = NA_real_
  )) |>
  as_tsibble(index = Month) |>
  filter(Month >= yearmonth("2000 Jan"))
# Fit ETS model
fit <- austa |>
  filter(Month < yearmonth("2018 Jan")) |>
  model(ETS(Visitors))
# Product forecasts
fc <- forecast(fit, h = 48) |>
  mutate(Month = as.Date(Month))
# Simulate 100 future sample paths
set.seed(1967)
sim <- fit |>
  generate(h = 48, times = 100) |>
  mutate(
    replicate = factor(.rep, levels = 1:100, labels = paste("Future", 1:100)),
    .rep = as.numeric(.rep)
  ) |>
  as_tibble() |>
  mutate(Month = as.Date(Month))
# Nice colors
cols <- scale_colour_manual(
  values = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442", sample(rainbow(93))),
  breaks = paste("Future", 1:100),
  name = " "
)
# Now build up some plots with alignment
p1 <- austa |>
  mutate(Visitors = if_else(Month >= yearmonth("2018 Jan"), NA_real_, Visitors)) |>
  as_tibble() |>
  mutate(Month = as.Date(Month)) |>
  ggplot(aes(x = Month, y = Visitors)) +
  geom_line() +
  labs(
    x = "Month",
    y = "Thousands of visitors",
    title = "Total short-term visitors to Australia"
  ) +
  scale_x_date(
    breaks = seq(as.Date("2000-01-01"), by = "5 years", l = 5),
    labels = paste("Jan", seq(2000, 2020, by = 5)),
    minor_breaks = seq(as.Date("2001-01-01"), by = "1 year", l = 25)
  ) +
  ylim(min(austa$Visitors, sim$.sim, na.rm = TRUE), max(austa$Visitors, sim$.sim, na.rm = TRUE))
p2 <- p1 + cols +
  geom_line(aes(y = .sim, group = replicate, colour = replicate),
    data = sim |> filter(.rep <= 1)
  )
p3 <- p1 + cols +
  geom_line(aes(y = .sim, group = replicate, colour = replicate),
    data = sim |> filter(.rep <= 2)
  )
p4 <- p1 + cols +
  geom_line(aes(y = .sim, group = replicate, colour = replicate),
    data = sim |> filter(.rep <= 3)
  )
p5 <- p1 + cols +
  geom_line(aes(y = .sim, group = replicate, colour = replicate),
    data = sim |> filter(.rep <= 10)
  )
p6 <- p1 + cols +
  geom_line(aes(y = .sim, group = replicate, colour = replicate), alpha = 0.5, data = sim) +
  guides(colour = "none")
p7 <- p1 +
  geom_line(aes(y = .sim, group = replicate, colour = replicate), alpha = 0.5, col = "gray", data = sim) +
  guides(colour = "none")
p8 <- p7 + autolayer(fc, level = c(50, 90))
p9 <- p8 + coord_cartesian(xlim = as.Date(c("2014-01-01", "2021-08-01"))) +
  scale_x_date(
    breaks = seq(as.Date("2000-01-01"), by = "2 years", l = 11),
    labels = paste("Jan", seq(2000, 2020, by = 2)),
    minor_breaks = seq(as.Date("2001-01-01"), by = "1 year", l = 25)
  )
aligned_plots <- align_patches(p1, p2, p3, p4, p5, p6, p7, p8, p9)
```

\forecast\pause

```{r austa1, dependson="austa", echo=FALSE}
aligned_plots[[1]]
```

## Random futures

\forecast

```{r austa2, dependson='austa', echo=FALSE}
aligned_plots[[2]]
```

\simfutures

## Random futures

\forecast

```{r austa3, dependson='austa', echo=FALSE}
aligned_plots[[3]]
```

\simfutures

## Random futures

\forecast

```{r austa4, dependson='austa', echo=FALSE}
aligned_plots[[4]]
```

\simfutures

## Random futures

\forecast

```{r austa5, dependson='austa', echo=FALSE}
aligned_plots[[5]]
```

\simfutures

## Random futures

\forecast

```{r austa6, dependson='austa', echo=FALSE}
aligned_plots[[6]]
```

\simfutures

## Random futures

\forecast

```{r austa7, dependson='austa', echo=FALSE}
aligned_plots[[7]]
```

\simfutures

## Random futures

\forecast

```{r austa8, dependson='austa', echo=FALSE}
aligned_plots[[8]]
```

\simfutures

## Random futures

\forecast

```{r austa9, dependson='austa', echo=FALSE}
aligned_plots[[9]]
```

\simfutures

## Random futures

\forecast

```{r austa9b, dependson='austa', echo=FALSE}
aligned_plots[[9]] +
  geom_line(
    colour = "black",
    data = austa |> filter(Month >= yearmonth("2018 Jan")) |> mutate(Month = as.Date(Month))
  )
```

\simfutures

\only<2>{\begin{textblock}{8.5}(.3,6.5)\begin{alertblock}{}\fontsize{13}{15}\sf
``He who sees the past as surprise-free is bound to have a future full of surprises.''\\\mbox{}\hfill{\small (Amos Tversky)}
\end{alertblock}\end{textblock}
}

## Statistical forecasting

- Thing to be forecast: $y_{T+h}$.
- What we know: $y_1,\dots,y_T$.
- Forecast distribution: ${y}_{T+h|t} = y_{T+h} \mid \{y_1,y_2,\dots,y_{T}\}$.
- Point forecast: $\hat{y}_{T+h|T} =\text{E}[y_{T+h} \mid y_1,\dots,y_T]$.
- Forecast variance: $\text{Var}[y_{t}  \mid y_1,\dots,y_T]$
- Prediction interval is a range of values of $y_{T+h}$ with high probability.

# Benchmark methods

## Some simple forecasting methods

```{r ausbeer, fig.height=4.6, echo=FALSE}
new_production <- aus_production |>
  filter(year(Quarter) >= 1992)
new_production |> autoplot(Beer) +
  labs(
    x = "Year", y = "megalitres",
    title = "Australian quarterly beer production"
  )
```

\begin{textblock}{7}(0.4,7.9)
\begin{alertblock}{}
\small{How would you forecast these series?}
\end{alertblock}
\end{textblock}

## Some simple forecasting methods

```{r staff, fig.height=4.6, echo=FALSE}
staff |> 
  summarise(`In-School Staff Count` = sum(`In-School Staff Count`)) |> 
  autoplot(`In-School Staff Count`)
```

\begin{textblock}{7}(0.4,7.9)
\begin{alertblock}{}
\small{How would you forecast these series?}
\end{alertblock}
\end{textblock}

## Some simple forecasting methods

```{r dj, fig.height=4.6, echo=FALSE}
gafa_stock |>
  filter(Symbol == "FB", Date >= ymd("2018-01-01")) |>
  autoplot(Close) +
  labs(
    title = "Facebook closing stock price in 2018",
    x = "Date", y = "Closing price ($USD)"
  )
```

\begin{textblock}{7}(0.4,7.9)
\begin{alertblock}{}
\small{How would you forecast these series?}
\end{alertblock}
\end{textblock}

## Some simple forecasting methods
\fontsize{13}{14}\sf

### `MEAN(y)`: Average method

  * Forecast of all future values is equal to mean of historical data $\{y_1,\dots,y_T\}$.
  * Forecasts: $\hat{y}_{T+h|T} = \bar{y} = (y_1+\dots+y_T)/T$

```{r mean-method-explained, echo=FALSE, message=FALSE, warning=FALSE, fig.height = 3.4}
bricks <- aus_production |>
  filter(!is.na(Bricks)) |>
  mutate(average = mean(Bricks))

fc <- bricks |>
  model(MEAN(Bricks)) |>
  forecast(h = "5 years")

bricks |>
  ggplot(aes(x = Quarter, y = Bricks)) +
  geom_line() +
  geom_line(aes(y = average), colour = "blue", linetype = "dashed") +
  geom_line(aes(y = .mean), data = fc, colour = "blue") +
  labs(title = "Clay brick production in Australia")
```

## Some simple forecasting methods
\fontsize{13}{14}\sf

### `NAIVE(y)`: Naive method

  * Forecasts equal to last observed value.
  * Forecasts: $\hat{y}_{T+h|T} =y_T$.
  * Consequence of efficient market hypothesis.

```{r naive-method-explained, echo = FALSE, warning = FALSE, fig.height = 3.4}
bricks |>
  filter(!is.na(Bricks)) |>
  model(NAIVE(Bricks)) |>
  forecast(h = "5 years") |>
  autoplot(filter(bricks, year(Quarter) > 1990), level = NULL) +
  geom_point(aes(y = Bricks), data = slice(bricks, n()), colour = "blue") +
  labs(title = "Clay brick production in Australia")
```

## Some simple forecasting methods
\fontsize{13}{14}\sf

### `SNAIVE(y ~ lag(m))`: Seasonal naive method

  * Forecasts equal to last value from same season.
  * Forecasts: $\hat{y}_{T+h|T} =y_{T+h-m(k+1)}$, where $m=$ seasonal period and $k$ is the integer part of $(h-1)/m$.

```{r snaive-method-explained, echo = FALSE, warning = FALSE, fig.height = 3.4}
bricks |>
  model(SNAIVE(Bricks ~ lag("year"))) |>
  forecast(h = "5 years") |>
  autoplot(filter(bricks, year(Quarter) > 1990), level = NULL) +
  geom_point(aes(y = Bricks), data = slice(bricks, (n() - 3):n()), colour = "blue") +
  labs(title = "Clay brick production in Australia")
```

## Some simple forecasting methods
\fontsize{13}{14}\sf

### `RW(y ~ drift())`: Drift method

 * Forecasts equal to last value plus average change.
 * Forecasts:\vspace*{-.7cm}

 \begin{align*}
 \hat{y}_{T+h|T} & =  y_{T} + \frac{h}{T-1}\sum_{t=2}^T (y_t-y_{t-1})\\
                 & = y_T + \frac{h}{T-1}(y_T -y_1).
 \end{align*}\vspace*{-0.2cm}

   * Equivalent to extrapolating a line drawn between first and last observations.

## Some simple forecasting methods

### Drift method

```{r drift-method-explained, echo = FALSE, warning = FALSE}
aus_production |>
  filter(!is.na(Bricks)) |>
  model(RW(Bricks ~ drift())) |>
  forecast(h = "5 years") |>
  autoplot(aus_production, level = NULL) +
  geom_line(
    aes(y = Bricks),
    data = slice(aus_production, range(cumsum(!is.na(Bricks)))),
    linetype = "dashed", colour = "blue"
  ) +
  labs(title = "Clay brick production in Australia")
```

## Model fitting

The `model()` function trains models to data.

\fontsize{10}{11}\sf

```{r brick-model}
brick_fit <- aus_production |>
  filter(!is.na(Bricks)) |>
  model(
    `Seasonal_naive` = SNAIVE(Bricks),
    `Naive` = NAIVE(Bricks),
    Drift = RW(Bricks ~ drift()),
    Mean = MEAN(Bricks)
  )
```

```{r brick-model2, echo=FALSE, dependson='brick-model'}
brick_fit
```

\vspace*{0.2cm}\begin{alertblock}{}
A \texttt{mable} is a model table, each cell corresponds to a fitted model.
\end{alertblock}

## Producing forecasts

\fontsize{10}{13}\sf

```{r brick-fc, echo = TRUE, dependson='brick-model'}
brick_fc <- brick_fit |>
  forecast(h = "5 years")
```

```{r brick-fbl, echo = FALSE, dependson='brick-fc'}
print(brick_fc, n = 4)
```

\vspace*{0.2cm}\begin{alertblock}{}
A \texttt{fable} is a forecast table with point forecasts and distributions.
\end{alertblock}

## Visualising forecasts

\footnotesize

```{r brick-fc-plot, warning=FALSE, message=FALSE, fig.height=3.4, dependson='brick-fc'}
brick_fc |>
  autoplot(aus_production, level = NULL) +
  labs(title = "Forecasts for quarterly clay brick production",
       x = "Year", y = "Millions of bricks") +
  guides(colour = guide_legend(title = "Forecast"))
```

## Prediction intervals
\fontsize{10}{12}\sf

```{r brick-fc-interval, dependson='brick-fc'}
brick_fc |>
  hilo(level = c(50, 75))
```

## Prediction intervals
\fontsize{10}{12}\sf

```{r brick-fc-interval2, dependson='brick-fc'}
brick_fc |>
  hilo(level = c(50, 75)) |>
  mutate(lower = `50%`$lower, upper = `50%`$upper)
```

# Lab Session 11
## Lab Session 11

Produce forecasts using an appropriate benchmark method, and plot the results using `autoplot()` for the following time series:
 
1. Total in-school staff in Australia (`staff`)
2. Preschool and School education payroll jobs (`payroll_education`)
3. Total Australian retail turnover (aggregate `aus_retail`)
