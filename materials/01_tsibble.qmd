---
title: "Time Series Analysis & Forecasting Using R"
subtitle: "1. Introduction to tsibbles"
author: "Mitchell O'Hara-Wild"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: header.tex
    keep-tex: false
---

## Outline

\vspace*{0.7cm}\tableofcontents

```{r}
#| label: setup
#| include: false
#| cache: false
source("setup.R")
```

# Time series data and tsibbles

## Tidyverts packages

\begin{textblock}{4.2}(8,0)\begin{alertblock}{}\Large\textbf{tidyverts.org}\end{alertblock}\end{textblock}

\placefig{1}{1.4}{width=3.5cm}{tsibble.png}
\placefig{5}{1.4}{width=3.5cm}{tsibbledata.png}
\placefig{3}{4.85}{width=3.5cm}{feasts.png}
\placefig{7}{4.85}{width=3.5cm}{fable.png}

## Tidyverts developers

\begin{textblock}{5.7}(0.4,1.4)
\begin{block}{Earo Wang}
\includegraphics[height=5.8cm]{earowang}
\end{block}
\end{textblock}

\begin{textblock}{5.7}(6.75,1.4)
\begin{block}{Mitchell O'Hara-Wild}
\includegraphics[height=5.8cm]{mitch}
\end{block}
\end{textblock}

## Time series data

  - Four-yearly Olympic winning times
  - Annual Google profits
  - Quarterly Australian beer production
  - Monthly rainfall
  - Weekly retail sales
  - Daily IBM stock prices
  - Hourly electricity demand
  - 5-minute freeway traffic counts
  - Time-stamped stock transaction data

## Class packages
\fontsize{13}{14}\sf

```r
# Data manipulation
library(dplyr)
# Plotting functions
library(ggplot2)
# Time and date manipulation
library(lubridate)
# Time series class
library(tsibble)
# Tidy time series data
library(tsibbledata)
# Time series graphics and statistics
library(feasts)
# Forecasting functions
library(fable)
```

\pause

```r
# All of the above
library(fpp3)
```



## `tsibble` objects

\fontsize{10}{11.2}\sf

```{r, echo = TRUE}
global_economy
```

\only<2->{\begin{textblock}{.75}(1.65,3.2)
\begin{alertblock}{}\fontsize{10}{10}\sf Index\phantom{dg}\end{alertblock}
\end{textblock}}
\only<3->{\begin{textblock}{1.6}(2.72,3.2)
\begin{alertblock}{}\fontsize{10}{10}\sf Key\phantom{dg}\end{alertblock}
\end{textblock}}
\only<4>{\begin{textblock}{6.3}(5.2,3.2)
\begin{alertblock}{}\fontsize{10}{10}\sf Measured variables\phantom{dg}\end{alertblock}
\end{textblock}}

## `tsibble` objects

\fontsize{10}{11.2}\sf

```{r, echo = TRUE}
tourism
```

\only<2->{\begin{textblock}{1.1}(1.6,3.13)
\begin{alertblock}{}\fontsize{10}{10}\sf Index\phantom{dg}\end{alertblock}
\end{textblock}}
\only<3->{\begin{textblock}{3.8}(3.05,3.13)
\begin{alertblock}{}\fontsize{10}{10}\sf Keys\phantom{dg}\end{alertblock}
\end{textblock}}
\only<4>{\begin{textblock}{1.5}(7.15,3.13)
\begin{alertblock}{}\fontsize{10}{10}\sf Measure\phantom{dg}\end{alertblock}
\end{textblock}}

\begin{textblock}{3}(9,5)
\begin{block}{}\fontsize{10}{10}\sf Domestic visitor nights in thousands by state/region and purpose.\phantom{dg}\end{block}
\end{textblock}

## `tsibble` objects

* A `tsibble` allows storage and manipulation of multiple time series in R.

* It contains:

  + An index: time information about the observation
  + Measured variable(s): numbers of interest
  + Key variable(s): optional unique identifiers for each series

* It works with tidyverse functions.

## The `tsibble` index

### Example
\fontsize{11}{12}\sf

```{r tstable}
mydata <- tsibble(
  year = 2012:2016,
  y = c(123, 39, 78, 52, 110),
  index = year
)
mydata
```

## The `tsibble` index

\begin{block}{}
For observations more frequent than once per year, we need to use a time class function on the index.
\end{block}
\fontsize{12}{13}\sf

```{r tstablemonth, echo=FALSE}
tsbl <- tibble(Month = paste(2019, month.abb[1:5]), Observation = c(50, 23, 34, 30, 25))
```

```{r tstablemonth2}
tsbl
```

\vspace*{10cm}

## The `tsibble` index

\begin{block}{}
For observations more frequent than once per year, we need to use a time class function on the index.
\end{block}
\fontsize{12}{13}\sf

```{r month-tsibble}
tsbl |>
  mutate(Month = yearmonth(Month)) |>
  as_tsibble(index = Month)
```

\vspace*{10cm}

## The `tsibble` index
\vspace*{-0.2cm}

Common time index variables can be created with these functions:

###
```{r tstable2, echo=FALSE}
tribble(
  ~`Frequency`, ~Function,
  "Annual", "`start:end`",
  "Quarterly", "`yearquarter()`",
  "Monthly", "`yearmonth()`",
  "Weekly", "`yearweek()`",
  "Daily", "`as_date()`, `ymd()`",
  "Sub-daily", "`as_datetime()`"
) |>
  knitr::kable(booktabs = TRUE)
```

# Example: School students and staff

## Australian school students

\full{australian_school}

## Download the data and inspect it

<https://www.abs.gov.au/statistics/people/education/schools/latest-release>

1. Download table 42b from the ABS Schools release.
2. Open in your spreadsheet viewer to inspect the structure.

. . .

:::{.callout-caution}
## What's in the data?

* What information is available in this table?
* How ready is this data for analysis? Is it 'tidy'?
:::

## Loading ABS data into R

Use the `readxl` package to read the excel spreadsheet into R.

:::{.callout-tip}
## ABS data

Data from the ABS often contains unwanted information in the first few rows. Skip the first 4 rows with `read_excel("data.xlsx", skip = 4)`.
:::

. . .

```{r}
library(readxl)
students_raw <- read_excel(
  "data/schools/Table 42b Number of Full-time and Part-time Students - 2006-2023.xlsx",
  sheet = 3, skip = 4
)
```

## Convert the data into a tsibble

\fontsize{14}{14}\sf

:::{.callout-caution}
## Converting into a tsibble

Use `as_tsibble()` to convert a dataset into a tsibble.

Which column(s) are:

* The `index` variable
* Identifying `key` variable(s)
* Measured variable(s)
:::

:::{.callout-tip}
## Hint: Look at the data

Print `students`, look at unique values with `distinct()` or get an overview of the data structure with `str()`.
:::

## Convert the data into a tsibble

\fontsize{12}{12}\sf

```{r}
#| error: true
students <- as_tsibble(
  students_raw,
  key = c(`State/Territory`, `Affiliation (Gov/Non-gov)`, `Affiliation (Gov/Cath/Ind)`,
          Sex, `Aboriginal and Torres Strait Islander Status`, `School Level`,
          `National Report on Schooling (ANR) School Level`,
          `Year (Grade)`, Age),
  index = Year
)
```

. . .

:::{.callout-important}
## Safety included!

The `tsibble` package is strict! This helps make sure your data is correct.

Use `duplicates()` to investigate problems in the data.
:::

## Detecting duplicates

\fontsize{12}{12}\sf

```{r}
#| eval: false
duplicates(
  students_raw,
  key = c(`State/Territory`, `Affiliation (Gov/Non-gov)`, `Affiliation (Gov/Cath/Ind)`,
          Sex, `Aboriginal and Torres Strait Islander Status`, `School Level`,
          `National Report on Schooling (ANR) School Level`,
          `Year (Grade)`, Age),
  index = Year
)
```

. . .

:::{.callout-note}
## Multiple measurements

You can't make two measurements at the exact same time.

It looks like the ABS has made a mistake here!
:::

## De-duplication

When you encounter problems with the data itself, you should follow up with the data provider.

Often duplicates can be resolved by either:

* filtering to remove duplicates
* aggregating to sum over duplicates

:::{.callout-caution}
## How should we fix the data?

Is filtering or aggregation best for fixing this problem?

:::

## Tidy tsibble

\fontsize{10}{10}\sf

```{r}
students <- students_raw |> 
  # Group by Year and all the character variables
  group_by(Year, across(where(is.character), identity)) |> 
  # Add up the duplicate rows
  summarise(across(ends_with("count"), sum), .groups = "drop") |> 
  # Convert to a tsibble
  as_tsibble(
    key = where(is.character),
    index = Year
  )
students
```

# Lab Session 1

## Lab Session 1
\fontsize{14}{15}\sf

Create a tsibble for the annual number of in-school staff.

1. Download table 50a from the ABS Schools release.

   <https://www.abs.gov.au/statistics/people/education/schools/latest-release>

2. Look at the data to see what it contains.

3. Identify the index and key variables to convert it into a tsibble with `as_tsibble()`.

4. How many time series does this dataset contain?

# Example: Internet vacancy index

## Internet vacancy index

\full{internet_vacancies}

<https://www.jobsandskills.gov.au/data/>

## Download the data and inspect it

Download the data from:

<https://www.jobsandskills.gov.au/data/internet-vacancy-index>

Inspect the data's structure in a spreadsheet viewer.

:::{.callout-caution}
## What's in the data?

* What information is available in this table?
* How ready is this data for analysis? Is it 'tidy'?
:::

## Read the data into R

Again, using `readxl` we'll load the data into R.

This time we don't need to skip any rows.

\fontsize{10}{10}\sf

```{r}
library(readxl)
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1)
```

## Tidy the data into a long form

The time information is in a wide (untidy) format.

We can use the `tidyr` package to convert it into a long (tidy) format with the `pivot_longer()` function.

\fontsize{10}{10}\sf
```{r}
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies")
```

## Tidy the time variable

The time variable doesn't look like dates at all.

We can blame excel for this.

:::{.callout-tip}
## Excel dates

Excel stores dates as numbers, the number of days since January 1st 1900. We can convert these numbers back into dates with `as.Date(month, origin = "1900-01-01")`.
:::

\fontsize{10}{10}\sf
```{r}
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies") |> 
  mutate(month = as.Date(as.integer(month), origin = "1900-01-01"))
```


## Tidy the time variable

We also need to use the correct temporal granularity. In this case the data is monthly, so we need to use `yearmonth()` for the time index.

\fontsize{10}{10}\sf
```{r}
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies") |> 
  mutate(month = yearmonth(as.Date(as.integer(month), origin = "1900-01-01")))
```

## Create the tsibble

The data is now ready to convert into a tsibble.

\fontsize{10}{10}\sf
```{r}
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies") |> 
  mutate(month = yearmonth(as.Date(as.integer(month), origin = "1900-01-01"))) |> 
  # Convert to a tsibble
  as_tsibble(
    key = c(Level, Title, State),
    index = month
  )
```

## Removing the aggregates

::: {.callout-tip}
## ABS aggregates

Data from the ABS often mixes aggregate values into the data - this is an untidy data pattern which can cause errors when computing your own aggregations. 

\vspace{0.3em}

These mistakes can be tricky to spot because:

* names of these aggregates are inconsistent ("Total", "AUST", etc.)
* more than one type of aggregate can exist in the same column


:::


## Removing the aggregates

\fontsize{10}{10}\sf
```{r}
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies") |> 
  mutate(month = yearmonth(as.Date(as.integer(month), origin = "1900-01-01"))) |> 
  # Remove aggregates
  filter(Level == 3, State != "AUST") |> 
  # Convert to a tsibble
  as_tsibble(
    key = c(Title, State),
    index = month
  )
```

## Adding extra information

The ANZSCO2 code contains two different levels of categorisation.

Our data currently only contains the titles for level 3 codes, but it is useful to add back their respective level 2 category.

\fontsize{10}{10}\sf
```{r}
anzsco_categories <- read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  filter(Level == 2) |> 
  distinct(ANZSCO_CODE, Title)
anzsco_categories
```

## Adding extra information

We can add these categories using a `left_join()`, matching the first character of the `ANZSCO_CODE` with the earlier table.

\fontsize{10}{10}\sf
```{r}
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies") |> 
  mutate(month = yearmonth(as.Date(as.integer(month), origin = "1900-01-01"))) |> 
  # Remove aggregates
  filter(Level == 3, State != "AUST") |> 
  # Add level 2 category information
  mutate(ANZSCO_CODE_CAT = substr(ANZSCO_CODE, 1, 1)) |> 
  left_join(anzsco_categories, by = c("ANZSCO_CODE_CAT" = "ANZSCO_CODE"), suffix = c("", "_CAT")) |> 
  select(ANZSCO_CODE, Title_CAT, Title, State, month, vacancies) |> 
  # Convert to a tsibble
  as_tsibble(
    key = c(Title_CAT, Title, State),
    index = month
  ) -> internet_vacancies
```

## Data cleaning

:::{.callout-tip}
## Data janitors

Data cleaning can be tiresome and unglamourous.
It's the janitorial work of the data world.

Without janitors, the world (or your analysis) will crumble.

Starting with quality data is essential for a quality analysis.
:::

To keep this workshop focused on forecasting, I'll be giving you tidy data (and the code I wrote to tidy it) from here on.

## Data cleaning

Experts claim data analysis time is 80\% data cleaning and preparation, and if you work with public data that is almost certainly true!

. . .

:::{.callout-note}
## More information

Learning and applying the principles of tidy data prevents problems later in the analysis (or worse, after the analysis is complete!).

Learn more about tidy data here: 

<https://tidyr.tidyverse.org/articles/tidy-data.html>
:::

## Workshop data

<https://workshop.nectric.com.au/tidyfc2024/labs.zip>

Download this ZIP to access all the tidied data.

Open the project by double-clicking 'tidyfc-exercises.Rproj'.


::: {.callout-note}

## Alternatively...

```r
usethis::use_course("https://workshop.nectric.com.au/tidyfc2024/labs.zip")
```

:::

# Filtering time series

## Manipulating time series data

Since a `tsibble` is rectangular data (like a `data.frame`/`tibble`), we can use existing data tools to manipulate it.

I recommend using the tidyverse (especially `dplyr`) for this.

. . .

::: {.callout-note}
## Other data operations

It is also possible to use other data manipulation functions from other packages. The tidyverse is best for tsibble as there is specific methods added to maintain safe temporal operations.
:::

## Filtering time series

A common task is looking at specific time series.

We can use `filter()` on key variables for this.

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  filter(Title == "Education Professionals")
```

## Filtering time series

::: {.callout-tip}
## Identifying key variables

To find all the possible values for time series, you can use `key_data()` or `distinct()`.
:::

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  distinct(State)
```

## Filtering time series

::: {.callout-caution}
## Looking at ACT

How would we further filter our `Education Professionals` series to be specific to the ACT?
:::

. . .

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  filter(
    Title == "Education Professionals",
    State == "ACT"
  )
```

# Aggregating time series

## Aggregating time series

The other common task is aggregating time series.

For this we use the `group_by() |> summarise()` combination.

. . .

::: {.callout-tip}
## Transforming time with the tidyverse

For *almost* all functions, a tsibble is identical to tibble.

A ***key*** difference is that tsibbles group the time ***index***.
:::

## Aggregating time series

Let's compute the total internet vacancies for each ANZSCO2.

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  group_by(Title_CAT, Title) |> 
  summarise(vacancies = sum(vacancies), .groups = "drop")
```

## Aggregating time series

This can be combined with filtering, to give the total internet vacancies for education professionals.

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  filter(Title == "Education Professionals") |> 
  group_by(Title_CAT, Title) |> 
  summarise(vacancies = sum(vacancies), .groups = "drop")
```

## Aggregating time

It is also common to produce temporal aggregates.

For example: aggregating monthly data to annual.

For this, we use the `index_by()` function (like `group_by()`).

. . .

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  filter(Title == "Education Professionals") |> 
  index_by(Year = year(month)) |> 
  group_by(Title_CAT, Title) |> 
  summarise(vacancies = sum(vacancies), .groups = "drop")
```

## Aggregating time

Sometimes we want to aggregate over all of time.

In this case we will no longer have a time series.

To do this, we convert back to tibble with `as_tibble()`.

\fontsize{10}{10}\sf
```{r}
internet_vacancies |> 
  filter(Title == "Education Professionals") |> 
  as_tibble() |> 
  group_by(Title_CAT, Title) |> 
  summarise(vacancies = sum(vacancies), .groups = "drop")
```

# Lab Session 2

## Lab Session 2
\fontsize{14}{15}\sf

With the annual number of in-school staff:

 5. Find which state has the most in-school staff in 2022.
 6. Create a new tsibble of total in-school staff for each state/territory and school type (affiliation 2).
 7. What is the typical difference in total number of male and female in-school staff? (try to visualise this!)
