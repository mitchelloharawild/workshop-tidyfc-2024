---
title: "Time Series Analysis & Forecasting Using R"
subtitle: "2. Time series graphics"
author: "Mitchell O'Hara-Wild"
format:
  beamer:
    pdf-engine: pdflatex
    aspectratio: 169
    fontsize: "14pt,t"
    section-titles: false
    knitr:
      opts_chunk:
        dev: "cairo_pdf"
    fig-width: 7.5
    fig-height: 3.5
    include-in-header: header.tex
    keep-tex: false
---

## Outline

\vspace*{0.7cm}\tableofcontents

```{r}
#| label: setup
#| include: false
#| cache: false
source("setup.R")
```

# Workshop data

## Workshop data

<https://workshop.nectric.com.au/tidyfc2024/labs.zip>

Download this ZIP to access all the tidied data.

Open the project by double-clicking 'tidyfc-exercises.Rproj'.


::: {.callout-note}

## Alternatively...

```r
usethis::use_course("https://workshop.nectric.com.au/tidyfc2024/labs.zip")
```

:::

# Time plots

## Time plots

Time plots are the simplest and most common visualisation for time series data (you've certainly seen these before!).

For this we put time on the x-axis and plot the measurements on the y-axis. We can make this plot easily with ggplot2, or with the `data |> autoplot(y)` helper function.

:::{.callout-tip}
## Overplotting beware

When working with many time series it's easy to over plot.

Filter or aggregate the data before plotting.
:::

## Recall the internet vacancies dataset

\fontsize{10}{10}\sf
```{r}
library(readxl)
anzsco_categories <- read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  filter(Level == 2) |> 
  distinct(ANZSCO_CODE, Title)
read_excel("data/Internet Vacancies, ANZSCO2 Occupations, States and Territories - August 2024.xlsx", sheet = 1) |> 
  # Tidy into a long form
  pivot_longer(matches("\\d{5}"), names_to = "month", values_to = "vacancies") |> 
  mutate(month = yearmonth(as.Date(as.integer(month), origin = "1900-01-01"))) |> 
  # Remove aggregates
  filter(Level == 3, State != "AUST") |> 
  # Add level 2 category information
  mutate(ANZSCO_CODE_CAT = substr(ANZSCO_CODE, 1, 1)) |> 
  left_join(anzsco_categories, by = c("ANZSCO_CODE_CAT" = "ANZSCO_CODE"), suffix = c("", "_CAT")) |> 
  select(ANZSCO_CODE, Title_CAT, Title, State, month, vacancies) |> 
  # Convert to a tsibble
  as_tsibble(
    key = c(Title_CAT, Title, State),
    index = month
  ) -> internet_vacancies
```

## Time plots

```{r}
internet_vacancies |> 
  filter(Title == "Education Professionals") |> 
  autoplot(vacancies)
```


## Time plots

Time plots help show the main changes in the data over time.

Here we can look for:

* Trend
* Seasonality
* Cycles
* Outliers

. . .

:::{.callout-note}
## Story of time

Discuss overall patterns across time and highlight specific points in time which are interesting.
:::

## Time plots

```{r}
internet_vacancies |> 
  filter(Title == "Education Professionals") |> 
  autoplot(vacancies) + 
  scale_y_log10()
```

# Lab Session 3
## Lab Session 3

1. Create time plots of the total school students and staff.

   Hint: You'll need to aggregate the data first.
2. Create time plots of the total students and staff by state.
3. Use ggplot2 to create a time plot from scratch, complete with labels.

::: {.callout-note}
## Finished early?

Try combining the student and staff datasets to create a time plot which
directly compares the number of students and staff.
:::


# Seasonal plots

## Seasonal plots

```{r}
#| fig-height: 3
payroll_education <- readabs::read_payrolls("subindustry_jobs") |> 
  filter(industry_division == "P-Education & training") |> 
  transmute(Industry = industry_subdivision, Week = yearweek(date), Jobs = value) |> 
  as_tsibble(index = Week, key = Industry)
payroll_education |> 
  autoplot(Jobs)
```

## Seasonal plots

:::{.callout-note}
## Ups and downs (peaks and troughs)

When is the seasonal maximum and minimum?

:::

```{r}
#| echo: false
#| fig-height: 3
payroll_education |> 
  autoplot(Jobs)
```


## Seasonal plots

  * Data plotted against the individual "seasons" in which the data were observed.  (In this case a "season" is a month.)
  * Something like a time plot except that the data from each season are overlapped.
  * Enables the underlying seasonal pattern to be seen more clearly, and also allows any substantial departures from the seasonal pattern to be easily identified.
  * In R: `gg_season()`
  
  
## Seasonal plots

```{r}
payroll_education |> 
  gg_season(Jobs)
```


## Quarterly Australian Beer Production

```{r, fig.height=2.7}
beer <- aus_production |>
  select(Quarter, Beer) |>
  filter(year(Quarter) >= 1992)
beer |> autoplot(Beer)
```

## Quarterly Australian Beer Production

```{r}
beer |> gg_season(Beer, labels = "right")
```

## Multiple seasonal periods
\fontsize{10}{11}\sf

```{r}
vic_elec
```

## Multiple seasonal periods

```{r, dev = "ragg_png", dpi = 180}
vic_elec |> gg_season(Demand)
```

## Multiple seasonal periods

```{r, dev = "ragg_png", dpi = 180}
vic_elec |> gg_season(Demand, period = "week")
```

## Multiple seasonal periods

```{r, dev = "ragg_png", dpi = 180}
vic_elec |> gg_season(Demand, period = "day")
```

## Seasonal subseries plots

  * Data for each season collected together in time plot as separate time series.
  * Enables the underlying seasonal pattern to be seen clearly, and changes in seasonality over time to be visualized.
  * In R: `gg_subseries()`

## Quarterly Australian Beer Production

```{r}
beer |> gg_subseries(Beer)
```

## Calendar plots

```{r sugrrants, eval=FALSE}
library(sugrrants)
vic_elec |>
  filter(year(Date) == 2014) |>
  mutate(Hour = hour(Time)) |>
  frame_calendar(x = Hour, y = Demand, date = Date, nrow = 4) |>
  ggplot(aes(x = .Hour, y = .Demand, group = Date)) +
  geom_line() -> p1
prettify(p1,
  size = 3,
  label.padding = unit(0.15, "lines")
)
```

* `frame_calendar()` makes a compact calendar plot
* `facet_calendar()` provides an easier ggplot2 integration.

## Calendar plots
\fontsize{10}{11}\sf

```{r sugrrants2, ref.label="sugrrants", echo=FALSE, out.height="90%", fig.height=5.4, fig.width=9}
```

# Lab Session 4
## Lab Session 4

1. Look at the monthly labour force of 15-24 year olds by State/Territory and educational attendance.

   Data is sourced from the ABS 6202.0 Table 16.

   The code to prepare this data is in `student_labour.R`.

2. Use `autoplot()`, `gg_season()` and `gg_subseries()` to explore the data.

   Look at different aggregations of the data, for example total persons by
   attendance.
   
3. What do you learn?

# Seasonal or cyclic?

## Time series patterns

Trend
  : pattern exists when there is a long-term increase or decrease in the data.

Seasonal
  : pattern exists when a series is influenced by seasonal factors (e.g., the quarter of the year, the month, or day of the week).

Cyclic
  : pattern exists when data exhibit rises and falls that are \emph{not of fixed period} (duration usually of at least 2 years).

## Time series components

### Differences between seasonal and cyclic patterns:

* seasonal pattern constant length; cyclic pattern variable length
* average length of cycle longer than length of seasonal pattern
* magnitude of cycle more variable than magnitude of seasonal pattern

## Time series patterns
\fontsize{10}{10}\sf

```{r, fig.height=2.7}
aus_production |>
  filter(year(Quarter) >= 1980) |>
  autoplot(Electricity) +
  labs(y = "GWh", title = "Australian electricity production")
```

## Time series patterns
\fontsize{10}{10}\sf

```{r, warning=FALSE, fig.height=2.7}
aus_production |>
  autoplot(Bricks) +
  labs(title = "Australian clay brick production",
       x = "Year", y = "million units")
```

## Time series patterns
\fontsize{10}{10}\sf

```{r, fig.height=2.7}
us_employment |>
  filter(Title == "Retail Trade", year(Month) >= 1980) |>
  autoplot(Employed / 1e3) +
  labs(title = "Retail employment, USA", y = "Million people")
```

## Time series patterns
\fontsize{10}{10}\sf

```{r, fig.height=2.7}
gafa_stock |>
  filter(Symbol == "AMZN", year(Date) >= 2018) |>
  autoplot(Close) +
  labs(title = "Amazon closing stock price", x = "Day", y = "$")
```

## Time series patterns
\fontsize{10}{10}\sf

```{r, fig.height=2.7}
pelt |>
  autoplot(Lynx) +
  labs(title = "Annual Canadian Lynx Trappings",
       x = "Year", y = "Number trapped")
```

## Seasonal or cyclic?

\alert{Differences between seasonal and cyclic patterns:}

  * seasonal pattern constant length; cyclic pattern variable length
  * average length of cycle longer than length of seasonal pattern
  * magnitude of cycle more variable than magnitude of seasonal pattern

\pause

\begin{alertblock}{}
The timing of peaks and troughs is predictable with seasonal data, but unpredictable in the long term with cyclic data.
\end{alertblock}

# Lag plots and autocorrelation

## Example: Beer production
\fontsize{10}{11}\sf

```{r}
new_production <- aus_production |>
  filter(year(Quarter) >= 1992)
new_production
```

## Example: Beer production
\fontsize{13}{15}\sf

```{r, fig.height=6.5, fig.width=6.5, out.width="7cm"}
new_production |> gg_lag(Beer)
```

## Example: Beer production
\fontsize{13}{15}\sf

```{r, fig.height=6.5, fig.width=6.5, out.width="7cm"}
new_production |> gg_lag(Beer, geom = "point")
```

## Lagged scatterplots

  * Each graph shows $y_t$ plotted against $y_{t-k}$ for
different values of $k$.
  * The autocorrelations are the correlations associated
with these scatterplots.
  * ACF (autocorrelation function):
     * $r_1=\text{Correlation}(y_{t}, y_{t-1})$
     * $r_2=\text{Correlation}(y_{t}, y_{t-2})$
     * $r_3=\text{Correlation}(y_{t}, y_{t-3})$
     * etc.
  * If there is **seasonality**, the ACF at the seasonal lag (e.g., 12 for monthly data) will be **large and positive**.

## Autocorrelation

Results for first 9 lags for beer data:
\fontsize{10}{11}\sf

```{r, echo=TRUE}
new_production |> ACF(Beer, lag_max = 9)
```

## Autocorrelation

Results for first 9 lags for beer data:
\fontsize{10}{11}\sf

```{r beeracf, fig.height=2.5}
new_production |>
  ACF(Beer, lag_max = 9) |>
  autoplot()
```

## ACF

```{r, fig.height=3, echo=TRUE}
new_production |>
  ACF(Beer) |>
  autoplot()
```

## Australian student enrolments
\fontsize{9}{10}\sf

```{r students}
students <- readxl::read_excel("data/schools/Table 42b Number of Full-time and Part-time Students - 2006-2023.xlsx", sheet = 3, skip = 4) |> 
  # Group by Year and all the character variables
  group_by(Year, across(where(is.character), identity)) |> 
  # Add up the duplicate rows
  summarise(across(ends_with("count"), sum), .groups = "drop") |> 
  # Convert to a tsibble
  as_tsibble(
    key = where(is.character),
    index = Year
  )
```

```{r, echo=FALSE}
students
```

## Australian student enrolments
\fontsize{9}{10}\sf

```{r holidays-plot, echo=TRUE, dependson="holidays", fig.height=3.1}
students |> autoplot(Count) +
  labs(y = "Student Count", title = "Australian students") + 
  scale_y_log10()
```

## Australian holidays
\fontsize{10}{11}\sf

```{r tourismacf}
students |> ACF(Count)
```

## Australian holidays

```{r tourismacf2, fig.height=5, fig.width=5, out.width="49%"}
students |> ACF(Count) |> autoplot()
```

## Trend and seasonality in ACF plots

- When data have a trend, the autocorrelations for small lags tend to be large and positive.
- When data are seasonal, the autocorrelations will be larger at the seasonal lags (i.e., at multiples of the seasonal frequency)
- When data are trended and seasonal, you see a combination of these effects.

## Youth labour force

```{r}
student_labour |> 
  summarise(persons = sum(persons)) |> 
  autoplot(persons)
```

## US retail trade employment

```{r}
student_labour |> 
  summarise(persons = sum(persons)) |>
  ACF(persons, lag_max = 48) |>
  autoplot()
```

## In-school staff
\fontsize{10}{11}\sf

```{r staff-total}
staff_total <- staff |> 
  summarise(`In-School Staff Count` = sum(`In-School Staff Count`))
staff_total
```

## Google stock price

```{r}
staff_total |> autoplot(`In-School Staff Count`)
```

## Google stock price

```{r}
staff_total |>
  ACF(`In-School Staff Count`, lag_max = 100) |>
  autoplot()
```

# Lab Session 4

## Lab Session 4

Explore the `ACF()` of the following time series:

1. Education payroll (`payroll_education`)
2. Total full-time students (`students`)
3. Total working students aged 15-24 in ACT (`student_labour`)

Can you spot any seasonality, cyclicity and trend? What do you learn about the series?

## Which is which?

```{r, fig.height=6, fig.width=12, echo=FALSE, warning=FALSE, out.width="100%"}
cowtemp <- as_tsibble(fma::cowtemp)
USAccDeaths <- as_tsibble(USAccDeaths)
AirPassengers <- as_tsibble(AirPassengers)
mink <- as_tsibble(fma::mink)
tp1 <- autoplot(cowtemp, value) + labs(x = "") + labs(y = "chirps per minute") +
  labs(title = "1. Daily temperature of cow")
tp2 <- autoplot(USAccDeaths, value) + labs(x = "") + labs(y = "thousands") +
  labs(title = "2. Monthly accidental deaths")
tp3 <- autoplot(AirPassengers, value) + labs(x = "") + labs(y = "thousands") +
  labs(title = "3. Monthly air passengers")
tp4 <- autoplot(mink, value) + labs(x = "") + labs(y = "thousands") +
  labs(title = "4. Annual mink trappings")
acfb <- ACF(cowtemp, value) |> autoplot() + labs(x = "") + labs(title = "B") + ylim(-0.5, 1)
acfa <- ACF(USAccDeaths, value) |> autoplot() + labs(x = "") + labs(title = "A") + ylim(-0.5, 1)
acfd <- ACF(AirPassengers, value) |> autoplot() + labs(x = "") + labs(title = "D") + ylim(-0.5, 1)
acfc <- ACF(mink, value) |> autoplot() + labs(x = "") + labs(title = "C") + ylim(-0.5, 1)
gridExtra::grid.arrange(tp1, tp2, tp3, tp4,
  acfa, acfb, acfc, acfd,
  nrow = 2
)
```

# White noise

## Example: White noise
\fontsize{11}{13}\sf

```{r, fig.height=3.3}
wn <- tsibble(t = seq(36), y = rnorm(36), index = t)
wn |> autoplot(y)
```

\only<2>{
\begin{textblock}{10}(1.4,6.7)\fontsize{13}{15}\sf
\begin{alertblock}{}
White noise data is uncorrelated across time with zero mean and constant variance.

(Technically, we require independence as well.)
\end{alertblock}
\end{textblock}}

## Example: White noise
\fontsize{10}{10}\sf

```r
wn |> ACF(y)
```

\fontsize{10}{10}\sf\tabcolsep=0.1cm

```{r wnacf, echo=FALSE, dependson="wn"}
wn |>
  ACF(y, lag_max = 10) |>
  as_tibble() |>
  mutate(lag = as.numeric(lag)) |>
  pivot_wider(names_from = lag, values_from = acf) |>
  rename_all(function(x) {
    paste("$r_{", x, "}$", sep = "")
  }) |>
  knitr::kable(
    booktabs = TRUE,
    escape = FALSE, align = "c", digits = 3,
    format.args = list(nsmall = 3)
  )
```

```{r, echo=FALSE, fig.height=1.5}
wn |>
  ACF(y) |>
  autoplot()
```

\pause\fontsize{13}{15}\sf

 * Sample autocorrelations for white noise series.
 * Expect each autocorrelation to be close to zero.
 * Blue lines show 95% critical values.

## Example: Pigs slaughtered

\fontsize{11}{12}\sf

```{r, fig.height=2.5}
pigs <- aus_livestock |>
  filter(State == "Victoria", Animal == "Pigs", year(Month) >= 2014)
pigs |> autoplot(Count / 1e3) +
  labs(x = "Year", y = "Thousands",
       title = "Number of pigs slaughtered in Victoria")
```

## Example: Pigs slaughtered

```{r}
pigs |>
  ACF(Count) |>
  autoplot()
```

## Example: Pigs slaughtered

Monthly total number of pigs slaughtered
in the state of Victoria, Australia, from January 2014 through December 2018
(Source: Australian Bureau of Statistics.)\pause

  * Difficult to detect pattern in time plot.
  * ACF shows significant autocorrelation for lag 2 and 12.
  * Indicate some slight seasonality.

\pause

These show the series is **not a white noise series**.

# Lab Session 5
## Lab Session 5

Plot the difference in ACT student enrolments, it can be done as follows:

\fontsize{10.5}{13}\sf

```{r, eval = FALSE}
students |>
  filter(`State/Territory` == "ACT") |>
  summarise(total = sum(`All Full-time and Part-time Student count`)) |> 
  autoplot(difference(total))
```

\fontsize{14}{16}\sf

Does `diff` look like white noise? Hint: Check the ACF
